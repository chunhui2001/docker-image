
[uwsgi]
chmod-socket = 660
vacuum = true                        ; Delete sockets during shutdown
; single-interpreter = true
; die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
; need-app = true
; 
; harakiri = 120                       ; forcefully kill workers after XX seconds
; ; py-callos-afterfork = true           ; allow workers to trap signals
; 
; max-requests = 1000                  ; Restart workers after this many requests
; max-worker-lifetime = 3600           ; Restart workers after this many seconds
; reload-on-rss = 2048                 ; Restart workers after this much resident memory
; worker-reload-mercy = 60             ; How long to wait before forcefully killing workers
; 
; processes 		= 4                       ; Maximum number of workers allowed
; cheaper-algo 	= busyness
; cheaper 		= 2                          ; Minimum number of workers allowed
; cheaper-initial = 16                 ; Workers created at startup
; cheaper-overload = 1                 ; Length of a cycle in seconds
; cheaper-step = 2                     ; How many workers to spawn at a time
; 
; cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
; cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
; cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
; cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
; cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue

uid 			= 1000
gid 			= 2000

log-date 		= %%Y-%%m-%%d %%H:%%M:%%S
logformat-strftime
; disable-logging = false               ; Disable built-in logging 
log-4xx 		= true                       ; but log 4xx's anyway
log-5xx			= true                       ; and 5xx's
; logformat 		= [pid: %(pid)|app: -req: -/-] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switchs) switchs on core %(core))
logformat 		= [%(ftime)] [%(addr)] - Access - "%(method) %(uri) %(proto)" => %(status) %(rsize)/bytes %(msecs)/ms
master 			= true
enable-threads 	= true
http 			= :5000
chdir 			= /www
wsgi-file 		= /www/main.py
module 			= main
callale 		= app
pythonpath 		= /www

