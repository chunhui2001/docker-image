## 安装Docker Compose
# curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
# chmod +x /usr/local/bin/docker-compose
# docker-compose --version
# docker-compose up -d

version: '2.4'

networks:
    br0:
      external: true

services:
  postgres_9.6:
    container_name: postgres_9.6
    image: postgres:9.6
    mem_limit: 100m
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    ports:
      - 5432:5432
    restart: always
    networks:
        br0:
          ipv4_address: 172.16.197.79
# 初始化数据库表
# $ docker run --rm --network=br0 -e "KONG_DATABASE=postgres" -e "KONG_PG_HOST=postgres_9.6" -e "KONG_PG_PASSWORD=kong" kong:0.14.1-centos kong migrations up
  kong_0.14.1:
    container_name: kong_0.14.1
    image: kong:0.14.1-centos
    mem_limit: 300m
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres_9.6
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"
    ports:
      - 8000:8000
      - 8443:8443
      - 127.0.0.1:8001:8001
      - 127.0.0.1:8444:8444
    restart: always
    networks:
        br0:
          ipv4_address: 172.16.197.81
  kong.dashboard.v3.5.0:
    container_name: kong.dashboard.v3.5.0
    image: chunhui2001/alpine:kong-dashboard.v3.5.0
    mem_limit: 300m
    entrypoint: ["/app/bin/kong-dashboard.js", "start", "--kong-url", "http://kong_0.14.1:8001", "--basic-auth", "keesh=Cc"]
    ports:
      - 8180:8080
    restart: always
    networks:
        br0:
          ipv4_address: 172.16.197.182

# Kong-Dashboard  | Kong versions   | Node versions
# versions        |                 |     
# -------------------------------------------------
# 1.x.x           | >= 0.6, < 0.10  |     
# 2.x.x           | 0.10            | 
# 3.0.x           | >= 0.9, <0.12   | >= 6.0.0
# 3.1.x, 3.2.x    | >= 0.9, <0.13   | >= 6.0.0
# 3.3.x, 3.4.x    | >= 0.9, <0.14   | >= 6.0.0
# 3.5.x           | >= 0.9, <0.15   | >= 6.0.0
# 3.6.x           | >= 0.9, <2.0.0  | >= 6.0.0

### 测试 Kong 是否工作正常
# curl http://127.0.0.1:8001

### 查看所有 service
# http://127.0.0.1:8001/services

### 创建一个service
# curl -i -X POST --url http://localhost:8001/services/ -H 'Content-Type: application/json' \
#                 --data '{"name": "api-v1-customers","url": "http://172.16.197.61"}'

### 在 service 下添加一个router
# curl -i -X POST --url  http://localhost:8001/services/api-v1-customers/routes/ -H 'Content-Type: application/json' \
#                 --data '{"hosts": ["mynginx.com"],"paths": ["/nginx"]}'

### 验证代理 (如果想在浏览器中验证需添加系统hosts: 127.0.0.1 mynginx.com)
# curl http://localhost:8000/nginx -H 'host: mynginx.com'  >>>> http://172.16.197.61
# curl http://localhost:8000/nginx/lua -H 'host: mynginx.com'  >>>> http://172.16.197.61/lua
# curl http://localhost:8000/nginx/node -H 'host: mynginx.com'  >>>> http://172.16.197.61/node

### API(Deprecated)
# curl -i -X POST \
#         --url  http://localhost:8001/apis/ \
#         --data 'name=weather-api' \
#         --data 'hosts=mynginx.com' \
#         --data 'uris=/nginx' \
#         --data 'upstream_url=http://172.16.197.61'
# 上面接口到意思是：这个API注册的名字叫weather-api。它被挂载在网关的/weather路径下，上游转发到 http://localhost:8000 去处理，转发的时候把前面的 /weather 前缀给去掉。
# 验证: http://mynginx.com:8000/nginx/


### For example (Warning: IP might very different for every machine)
# API server that is live on server http://172.19.0.4:10000/api/v1/customers
# We set routes path /api/v1/customers
# And set the service host to http://172.19.0.4:10000, and path /api/v1/customers
# So, when client request to kong (in this case kong is live at localhost:9000) with path route /api/v1/customer : 
# in complete client request http://localhost:9000/api/v1/customers , Kong will proxy it to 172.19.0.4:10000/api/v1/customers



