<?xml version="1.0"?>
<!DOCTYPE mycat:schema SYSTEM "schema.dtd">
<mycat:schema xmlns:mycat="http://io.mycat/">


	<!-- 
		我在 192.168.0.2、192.168.0.3 均有数据库 lunch。
		lunchmenu、restaurant、userlunch、users 这些表都只写入节点 dn1，也就是 192.168.0.2 这个服务，
		而 dictionary 写入了 dn1、dn2 两个节点，也就是 192.168.0.2、192.168.0.3 这两台服务器。
		分片的规则为：mod-long。
		主要关注 rule 属性，rule 属性的内容来源于 rule.xml 这个文件，
		Mycat 支持 10 种分表分库的规则， 基本能满足你所需要的要求， 这个必须赞一个， 其他数据库中间件好像都没有这么多。
		table 中的 rule 属性对应的就是 rule.xml 文件中 tableRule 的 name, 
		具体有哪些分表和分库的实现，建议还是看下文档。我这里选择的 mod-long 就是将数据平均拆分。
		因为我后端是两台物理库，所以 rule.xml 中mod-long 对应的 function count 为 2，见下面部分代码： 
	-->

	<schema name="lunch" checkSQLschema="false" sqlMaxLimit="100">
		<table name="lunchmenu" dataNode="dn1"  />
        <table name="restaurant" dataNode="dn1"  />
        <table name="userlunch" dataNode="dn1"  />
        <table name="users" dataNode="dn1"  />
        <table name="dictionary" primaryKey="id" autoIncrement="true" dataNode="dn1,dn2" rule="mod-long" />
	</schema>

	<dataNode name="dn1" dataHost="test1" database="lunch" />
	<dataNode name="dn2" dataHost="test2" database="lunch" />

	<dataHost name="test1" maxCon="1000" minCon="10" balance="1" writeType="0" dbType="mysql" dbDriver="native">
		<heartbeat>select user();</heartbeat>
		<writeHost host="hostM1" url="192.168.0.2:3306" user="root" password="Cc">
			<readHost host="hostS2" url="192.168.0.2:3306" user="root" password="Cc" />
		</writeHost>
	</dataHost>

	<dataHost name="test2" maxCon="1000" minCon="10" balance="1" writeType="0" dbType="mysql" dbDriver="native">
		<heartbeat>select user();</heartbeat>
		<writeHost host="hostM1" url="192.168.0.3:3306" user="root" password="Cc">
			<readHost host="hostS2" url="192.168.0.3:3306" user="root" password="Cc" />
		</writeHost>
	</dataHost>
	
</mycat:schema>


